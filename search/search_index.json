{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my notes, thoughts and documentations!","text":"<p>This is a permanent location to capture notes, thoughts, learnings and ideas.</p>"},{"location":"about/","title":"About","text":"<p>Still thinking about what to put down for this section ... ^_^</p>"},{"location":"cloud/","title":"Cloud Related","text":""},{"location":"data_engineering/","title":"Data Engineering","text":"<p>Some notes, tips and ideas regarding Data Engineering are documented here.</p>"},{"location":"data_engineering/databases/","title":"Databases","text":""},{"location":"data_engineering/databases/database_access/","title":"Database Access","text":""},{"location":"data_engineering/databases/database_access/#access-snowflake-database","title":"Access Snowflake Database","text":"<p>A simple way to access Snowflake database locally using Python is as follows:</p> <pre><code>import snowflake.connector\n\ncon = snowflake.connector.connect(\n    user=\"&lt;user-name&gt;\",\n    account=\"&lt;snowflake-account&gt;\",  # at 3M it's mmm-ww.privatelink\n    authenticator=\"externalbrowser\",\n    session_parameters={\"QUERY_TAG\": \"my test\"}\n)\ncs = con.cursor()\n\n# query script\ncontent = cs.execute(\n    \"\"\"\n    SELECT * FROM table\n    \"\"\"\n).fetchall()\n\n### Some additional actions ###\n\ncs.close()\ncon.close()\n</code></pre> <p>To get data as a Pandas dataframe, do the following:</p> <pre><code>import pandas as pd\n\ndf = pd.DataFrame(content, columns=[col[0] for col in cs.description])\n</code></pre>"},{"location":"data_engineering/databases/database_access/#access-sql-server-database-on-mac","title":"Access SQL Server database (on Mac)","text":"<p>It's a much simpler process to access SQL Server database on Windows, but on Mac it can be tricky. Below is a method that's proven to work.</p> <p>First we need a bunch of information for the database:</p> <pre><code>import getpass\n\nSERVER = \"&lt;server&gt;\"\nPORT = \"1433\"  # 1433 is often a good starting one\nDATABASE = \"&lt;database-name&gt;\"\nDOMAIN = \"&lt;domain-name&gt;\"\nUSER = \"&lt;username&gt;\"\nPASSWORD = getpass.getpass(\"Enter password: \")  # getpass would prompt for user to enter directly\n</code></pre> <p>Now, we need to go to JTDS to download a driver: https://jtds.sourceforge.net and keep its directory:</p> <pre><code>JTDS_JAR = \"&lt;directory-of-jar-file&gt;\"\n</code></pre> <p>Now we can query with the code below:</p> <pre><code>import jaydebeapi\nimport csv\n\njdbc_url = (\n    f\"jdbc:jtds:sqlserver://{SERVER}:{PORT}/{DATABASE};\"\n    f\"useNTLMv2=true;domain={DOMAIN};\"\n)\nquery_res_file = \"result.csv\"\n\ncon = jaydebeapi.connect(\n    \"net.sourceforge.jtds.jdbc.Driver\",\n    jdbc_url, [USER, PASSWORD], JTDS_JAR\n)\ncs = con.cursor()\ncs.execute(\n    \"\"\"\n    SELECT * FROM table\n    \"\"\"\n)\n\n# fetch all rows\nrows = cs.fetchall()\n# get column headers\nheaders = [desc[0] for desc in cs.description]\n# write to csv\nwith open(query_res_file, \"w\", newline=\"\") as f:\n    writer = csv.writer(f)\n    writer.writerow(headers)\n    writer.writerows(rows)\n</code></pre>"},{"location":"data_engineering/databricks/","title":"Databricks","text":""},{"location":"data_science/","title":"Data Science","text":""},{"location":"python/","title":"Python","text":""},{"location":"tips_tricks/","title":"Tips &amp; Tricks","text":""}]}